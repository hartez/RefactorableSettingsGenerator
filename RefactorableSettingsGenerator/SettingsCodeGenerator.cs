using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;

namespace CodeWiseLLC.RefactorableSettingsGenerator
{
    public class SettingsCodeGenerator
    {
        private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

";

        private static void WrapWithNamespace(IndentedTextWriter writer, string ns, Action<IndentedTextWriter> inner)
        {
            writer.WriteLine("namespace {0} {{", ns);
            writer.WriteLine();
            IndentInner(writer, inner);
            writer.Write("}");
        }

        private static void IndentInner(IndentedTextWriter writer, Action<IndentedTextWriter> inner)
        {
            writer.Indent += 1;
            if(inner != null)
            {
                inner(writer);
            }
            writer.Indent -= 1;
        }

        private static void WrapWithClassDef(IndentedTextWriter writer, string className,
            Action<IndentedTextWriter> inner)
        {
            var ver = Assembly.GetExecutingAssembly().FullName.Split('=')[1].Split(',')[0];

            const string compilerGeneratedAttribute =
                "[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]";
            var generatedCodeAttribute =
                string.Format("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{1}\", \"{0}\")]",
                    ver.Substring(0, ver.LastIndexOf(".", StringComparison.Ordinal)), "Refactorable Settings Generator");

            var classDeclaration =
                string.Format(
                    "internal sealed partial class {0} : global::System.Configuration.ApplicationSettingsBase {{",
                    className);

            writer.WriteLine(compilerGeneratedAttribute);
            writer.WriteLine(generatedCodeAttribute);
            writer.WriteLine(classDeclaration);
            IndentInner(writer, inner);
            writer.WriteLine("}");
        }

        private static void WriteDefaultInstance(IndentedTextWriter writer, string className)
        {
            writer.WriteLine(
                "private static {0} defaultInstance = (({0})(global::System.Configuration.ApplicationSettingsBase.Synchronized(new {0}())));",
                className);

            writer.WriteLine();
            writer.WriteLine("public static {0} Default {{", className);
            writer.Indent += 1;
            writer.WriteLine("get {");
            writer.Indent += 1;
            writer.WriteLine("return defaultInstance;");
            writer.Indent -= 1;
            writer.WriteLine("}");
            writer.Indent -= 1;
            writer.WriteLine("}");
        }

        private static void WriteSettings(IndentedTextWriter writer, XmlNodeList settingsNodes,
            XmlNamespaceManager nsmgr)
        {
            foreach(XmlNode node in settingsNodes)
            {
                WriteSetting(writer, node, nsmgr);
            }
        }

        private static void WriteSettingsNames(IndentedTextWriter writer, XmlNodeList settingsNodes,
            XmlNamespaceManager nsmgr)
        {
            writer.WriteLine("public static class SettingsNames {");
            writer.Indent += 1;

            foreach (XmlNode node in settingsNodes)
            {
                WriteSettingName(writer, node, nsmgr);
            }

            writer.Indent -= 1;
            writer.WriteLine("}");
        }

        private static void WriteSettingName(IndentedTextWriter writer, XmlNode node, XmlNamespaceManager nsmgr)
        {
            if (node.Attributes == null)
            {
                return;
            }

            var name = node.Attributes["Name"].Value;

            writer.WriteLine("public const string {0} = \"{0}\";", name);
        }

        private static void WriteSetting(IndentedTextWriter writer, XmlNode node, XmlNamespaceManager nsmgr)
        {
            if(node.Attributes == null)
            {
                return;
            }

            var type = node.Attributes["Type"].Value;
            var name = node.Attributes["Name"].Value;
            var scope = node.Attributes["Scope"].Value;

            var value = node.SelectSingleNode("n:Value", nsmgr);

            writer.WriteLine();

            if(scope == "User")
            {
                writer.WriteLine("[global::System.Configuration.UserScopedSettingAttribute()]");
            }
            else if(scope == "Application")
            {
                writer.WriteLine("[global::System.Configuration.ApplicationScopedSetting()]");
            }

            writer.WriteLine("[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");

            if(value != null)
            {
                writer.WriteLine("[global::System.Configuration.DefaultSettingValueAttribute(\"{0}\")]", value.InnerText);
            }

            writer.WriteLine("public {0} {1} {{", type, name);
            writer.Indent += 1;
            writer.WriteLine("get {");
            writer.Indent += 1;
            writer.WriteLine("return (({0})(this[\"{1}\"]));", type, name);
            writer.Indent -= 1;
            writer.WriteLine("}");
            writer.WriteLine("set {");
            writer.Indent += 1;
            writer.WriteLine("this[\"{0}\"] = value;", name);
            writer.Indent -= 1;
            writer.WriteLine("}");
            writer.Indent -= 1;
            writer.WriteLine("}");
        }

        public static string GenerateCodeFrom(string path)
        {
            var doc = new XmlDocument();
            doc.Load(path);

            if(doc.DocumentElement == null)
            {
                return string.Empty;
            }

            var xmlns = doc.DocumentElement.Attributes["xmlns"].Value;
            var nsmgr = new XmlNamespaceManager(doc.NameTable);
            nsmgr.AddNamespace("n", xmlns);

            var settingsFile = doc.SelectSingleNode("//n:SettingsFile", nsmgr);

            if(settingsFile == null || settingsFile.Attributes == null)
            {
                return string.Empty;
            }

            var settingsNodes = doc.SelectNodes("//n:Setting", nsmgr);

            if(settingsNodes == null)
            {
                return string.Empty;
            }

            var output = new StringBuilder();

            var outputWriter = new StringWriter(output);

            var writer = new IndentedTextWriter(outputWriter, "\t") {Indent = 0};

            var className = settingsFile.Attributes["GeneratedClassName"].Value;

            // Add the "auto generated code" warning
            writer.Write(Header);
            WrapWithNamespace(writer, settingsFile.Attributes["GeneratedClassNamespace"].Value,
                w => WrapWithClassDef(w, className,
                    w1 =>
                    {
                        w.WriteLine();
                        WriteDefaultInstance(w, className);
                        w.WriteLine();
                        WriteSettingsNames(w, settingsNodes, nsmgr);
                        WriteSettings(w, settingsNodes, nsmgr);
                    }));

            return output.ToString();
        }
    }
}